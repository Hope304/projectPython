trainedmonkey: keyboard bangings about living, working, and playing skip to sidebar skip to search box trainedmonkey aka Jim Winstead Jr. Hire me! I am a software developer. After teaching myself to code on Apple II computers in junior high school and building software for our family-owned telecom business, my degree in Computer Science from Harvey Mudd College gave me the grounding for a career in software development where I was able to let my programming freak flag fly: I worked for Knowledge Adventure, an educational/games software company (where I first started leading teams of developers), HomePage.com, an internet startup (where we developed a white-label free web hosting platform), and MySQL Ab (where I led the web development team and then transitioned over to the server development team). Through this time I was also involved in the open source community. In college, I was involved in the very early days of Linux, and I took over maintenance from Linus of the "root" disk used to install Linux before distributions. While working on websites for Knowledge Adventure, I got involved with the the PHP project, and became a founding member of the PHP Group. I helped set up and maintain some of the collaborative development infrastructure, including the mailing lists and online documentation feedback system. Then at HomePage.com, I contributed work we did related to mod_perl, and became a member of the Apache Software Foundation. After MySQL Ab was acquired by Sun Microsystems (and then further by Oracle), I co-founded Raw Materials Art Supplies, a retail store in downtown Los Angeles which I have been operating as general manager for the last 15 years. I built Scat POS, a point of sale and ecommerce system using PHP and MySQL that we are using to run the business. It has involved a lot of integration work (payment processors, product feeds, shipping), and I automated as much as I could to focus on our artists' needs. This enabled us to build our business from scratch into one of the top independent art supply stores in the country. I'm looking for individual contributor roles. PHP/MySQL is the core of what I do best, but I'm comfortable with full-stack web development, Linux system administration, C/C++, Docker, and confident in my abilities to jump into any tech stack and get up to speed quickly. View my LinkedIn profile for some dates and details, and my GitHub profile for some of my open source contributions. Contact me to discuss opportunities. Who is getting the ping data? The excellent journalists at 404 Media uncovered information about Automattic selling data to “AI” companies from WordPress.com and Tumblr. A number of people have jumped in to say that “WordPress.com != WordPress” which is a fair point, but this is where I touch the onion on my belt and point out that even WordPress sends pings to Ping-o-Matic by default and does anyone know who gets a real-time feed of that data? » February 27 (Tuesday) 3:47pm » blo.gs, blogging, fads, wordpress, automattic, pings » Bluesky butterfly logo » Comment Grinding the ArchiveBox I have been playing around with setting up ArchiveBox so I could use it to archive pages that I bookmark.I am a long-time, but infrequent, user of Pinboard and have been trying to get in the habit of bookmarking more things. And although my current paid subscription doesn’t run out until 2027, I’m not paying for the archiving feature. So as I thought about how to integrate my bookmarks into this site, I started looking at how I might add that functionality. Pinboard uses wget, which seems simple enough to mimic, and I also found other tools like SingleFile.That’s when I ran across mention of ArchiveBox and decided that would be a way to have the archiving feature I want and don’t really need/want to expose to the public. So I spun it up on my in-home server, downloaded my bookmarks from Pinboard, and that’s when the coding began.ArchiveBox was having trouble parsing the RSS feed from Pinboard, and as I started to dig into the code I found that instead of using an actual RSS parser, it was either parsing it using regexes (the generic_rss parser) or an XML parser (the pinboard_rss parser). Both of those seemed insane to me for a Python application to be doing when feedparser has practically been the gold standard of RSS/Atom parsers for 20 years.After sleeping on it, I decided to roll up my sleeves, bang on some Python code, and produced a pull request that switches to using feedparser. (The big thing I didn’t tackle is adding test cases because I haven’t yet wrapped my head around how to run those for the project when running it within Docker.)Later, I realized that the RSS feed I was pulling of my bookmarks would be good for pulling on a schedule to keep archiving new bookmarks, but I actually needed to export my full list of bookmarks in JSON format and use that to get everything in the system from the start.But that importer is broken, too. And again it’s because instead of just using the json parser in the intended way, there was a hack to work around what appears to have been a poor design decision (ArchiveBox would prepend the filename to the file it read the JSON data from when storing it for later reading) that then got another hack piled on top of it when that decision was changed. The generic_json parser used to just always skip the first line of the file, but when that stopped being necessary, that line-skipping wasn’t just removed, it was replaced with some code that suddenly expected the JSON file to look a certain way.Now I’ve been reading more Python code and writing a little bit, and starting to get more comfortable some of the idioms. I didn’t make a full pull request for it, but my comment on the issue shows a different strategy of trying to parse the file as-is, and if that fails, skip the first line and try it again. That should handle any JSON files with garbage in the first line, such as what ArchiveBox used to store them as. And maybe there is some system out there that exports bookmarks in a format it calls JSON that actually has garbage on the first line. (I hope not.)So with that workaround applied locally, my Pinboard bookmarks still don’t load because ArchiveBox uses the timestamp of the bookmark as a unique primary key and I have at least a couple of bookmarks that happen to have the same timestamp. I am glad to see that fixing that is project roadmap, but I feel like every time I dig deeper into trying to use ArchiveBox it has me wondering why I didn’t start from scratch and put together what I wanted from more discrete components.I still like the idea of using ArchiveBox, and it is a good excuse to work on a Python-based project, but sometimes I find myself wondering if I should pay more attention my sense of code smell and just back away slowly.(My current idea to work around the timestamp collision problem is to add some fake milliseconds to the timestamp as they are all added. That should avoid collisions from a single import. Or I could just edit my Pinboard export and cheat the times to duck the problem.) » February 25 (Sunday) 7:18pm » code, web, open source, python, ArchiveBox, software architecture » » Comment Oracle Cloud Agent considered harmful? Playing around with my OCI instances some more, I looked more closely at what was going on when I was able to trigger the load to go out of control, which seemed to be anything that did a fair amount of disk I/O. What quickly stuck out thanks to htop is that there were a lot of Oracle Cloud Agent processes that were blocking on I/O.So in the time-honored tradition of troubleshooting by shooting suspected trouble, I removed Oracle Cloud Agent.After doing that, I can now do the things that seemed to bring these instances to their knees without them falling over, so I may have found the culprit.I also enabled PHP’s OPcache and some rough-and-dirty testing with good ol’ ab says I took the homepage from 6r/s to about 20r/s just by doing that. I am sure there’s more tuning that I could be doing. (Requesting a static file gets about 200 r/s.)By the way, the documentation for how to remove Oracle Cloud Agent on Ubuntu systems is out of date. It is now a Snap package, so it has to be removed with sudo snap remove oracle-cloud-agent. And then I also removed snapd because I’m not using it and I’m petty like that. » February 23 (Friday) 5:35pm » code, php, linux, OCI, troubleshooting, OPcache » Bluesky butterfly logo » Comment Fall down, go boom I am either really good at making Oracle Cloud Infrastructure instances fall over, or the VM.Standard.E2.1.Micro shape is even more under-powered than I expected. I had been using the Ubuntu “minimal” image as my base, so I thought I would try the Oracle Linux 8 image and I couldn’t even get it to run yum check-update without that process getting killed. That seems like a less-than-ideal experience out of the box.What seems to happen on the instances (with Ubuntu) that I am using to host this site is that if something does too much I/O, the load average spikes, and things slowly grind through before recovering. The problem is that something like “running composer” seems to be too much I/O, which makes it awkward to deploy code.Another thing that seems to get out of control quickly is when I reindex the site with Meilisearch. Considering there is very little data being indexed, that obviously shouldn’t be causing any sort of trouble. I have two instances spun up now, so I can play with the settings on one without temporarily choking off the live site. It’s probably just a matter of setting the maximum indexing memory in Meilisearch’s configuration or constraining the memory on that container.I also added a OCI Flexible Network Load Balancer in front of my instance so I can quickly switch things over to another without waiting on any DNS propagation. Maybe if Ampere instances ever become available in my region I will play around with splitting the deployment across multiple instances. » February 22 (Thursday) 7:35pm » code, Meilisearch, OCI, DevOps » Bluesky butterfly logo » Comment Coming to you from OCI After some fights with Deployer and Docker, this should be coming to you from a server in Oracle Cloud Infrastructure. There are still no Ampere instances available, so it is what they call a VM.Standard.E2.1.Micro. It seems be underpowered relative to the Linode Nanode that it was running on before, or maybe I just have set things up poorly.But having gone through this, I have the setup for the “production” version of my blog streamlined so it should be easy to pop up somewhere else as I continue to tinker. » February 21 (Wednesday) 8:00pm » code, php, OCI, Deployer » Bluesky butterfly logo » Comment Docker, Tailscale, and Caddy, oh my I do my web development on a server under my desk, and the way I had it set up is with a wildcard entry set up for *.muck.rawm.us so requests would hit nginx on that server which was configured to handle various incarnations of whatever I was working on. The IP address was originally just a private-network one, and eventually I migrated that to a Tailscale tailnet address. Still published to public DNS, but not a big deal since those weren’t routable.A reason I liked this is because I find it easier to deal with hostnames like talapoin.muck.rawm.us and scat.muck.rawm.us rather than running things on different ports and trying to keep those straight.One annoyance was that I had to maintain an active SSL certificate for the wildcard. Not a big deal, and I had that nearly automated, but a bigger hassle was that whenever I wanted to set up another service it required mucking about in the configuration.Something I have wanted to play around with for a while was using Tailscale with Docker to make each container (or docker-compose setup, really) it’s own host on my tailnet.So I finally buckled down, watched this video deep dive into using Tailscale with Docker, and got it all working.I even took on the additional complication of throwing Caddy into the mix. That ended up being really straightforward once I finally wrapped my head around how to set up the file paths so Caddy could serve up the static files and pass the PHP off to the php-fpm container. Almost too easy, which is probably why it took me so long.Now I can just start this up, it’s accessible at talapoin.{tailnet}.ts.net, and I can keep on tinkering.While it works the way I have it set up for development, it will need tweaking for “production” use since I won’t need Tailscale. » February 20 (Tuesday) 2:13pm » code, php, docker, tailscale, Caddy » Bluesky butterfly logo » Comment Making a smaller footprint I have been working on shutting down some of the (virtual) servers that we used for the store and other things. There were three: one for the store’s website, one for some WordPress sites/blogs, and one for this site.The server hosting the store was the most expensive one, but now the site has been reduced to just a couple of static pages, I set those up to run off Bunny.net (that’s a referral link). That should cost a few pennies per months, so the $40 credit I have should cover that indefinitely.I haven’t figured out what to do with the WordPress blogs, but none of them are active and I’ll probably just turn them into static sites and host them on Bunny.net, too.The last thing is this server which could be a static site but I like tinkering my little blog engine and think I want to keep it dynamic. I may move the hosting over to Oracle Cloud Infrastructure (OCI) because they offer some “always” free services that would be more than adequate. I have been really curious to play with their Arm-based compute servers but there has been no availability in the region I picked when signing up.I need to decide how I want to set up the server on OCI to run this. I’m currently using a pretty simple docker-compose.yml setup to handle running a php-fpm container, a MySQL database server, and Sphinx, with the system nginx fronting things. I already know I want to replace Sphinx, and I think I want to try using Caddy on the front. I guess if I really wanted to be extra and take advantage of the free resources from Oracle that I’d spin up an Autonomous Database instead of using MySQL.Between credits I have with Bunny.net and Oracle’s free offering, I’ll be paying almost nothing for hosting all of this except for the domain name renewals. That soothes my cheapskate soul. » February 18 (Sunday) 7:44pm » blogging, fads, hosting, linode, OCI » Bluesky butterfly logo » Comment My history with programming languages I think I have always had an interest in playing around with different programming languages. My first probably would have been Applesoft BASIC. In elementary school, I remember writing a bouncing-lines graphic toy more than once, and D&D character generators.I am really not sure what came next, but it was probably mostly things like DOS batch files (and eventually 4DOS batch files).I wrote some little utilities for DESQview in assembly and even released them as freeware, but I haven’t been able to track them down again.The first substantial project I did was probably the billing and reporting system for my dad’s company that was written in FoxPro before it was even acquired by Microsoft. This would have been where I first encountered SQL, too.All of this would have been essentially self-taught. I vaguely remember participating in some computer classes or clubs, but nothing terribly structured. I’m sure that I was exposed to Pascal, probably Turbo Pascal, at some point in those.One memory from my freshman year at college is that I used the (* multi-line syntax *) of Pascal comments on an assignment instead of the { single-line syntax } and the grader for the assignment had some sort of reaction about that.I was exposed to a lot of programming languages in college, especially because I had to take the “Programming Languages” class twice after failing it the first time. (I had a rough time in my sophomore year.) It was taught by different professors who used different languages to teach the concepts. Some languages I remember doing at least an assignment or two in: C, Fortran, ML, Scheme, Lisp, Perl, COBOL, Ada, and APL. Part of Harvey Mudd College’s program is a capstone project in your senior year where you work on a project for an outside company or organization. The project I was part of was a wrote a tool for doing internationalization for voicemail prompts for Octel Communications using Visual Basic.My first job after college was for an educational/games software company named Knowledge Adventure (KA) on a project that was released as “Steven Spielberg’s Director’s Chair.” At the time, all of the projects at the company were done using an in-house programming language named “Acomplish” (or maybe “Accomplish”) which was short for “A Computer English.” I have been trying to dig up some reference to or examples of it and have come up empty so far, but it was a natural-language-ish syntax that had originally been intended for producers to write in. By the time I worked there it was mostly being used by programmers who graduated from Mudd, CalTech, and UCLA, which is kind of funny.It was while working at KA working on their website that I got involved in the early days of PHP. I guess here is where someone could make jokes about how obviously someone who had failed “Programming Languages” had a hand in PHP, but I don’t recall that I had very much, if any, involvement in the actual design of the language. (Although I remember having to write way too many emails to make that case that casting a string to an integer should not interpret it the same way as numeric literals because people would have brought out pitchforks when leading zeroes caused them to be interpreted as octal values.)At KA, the second title I worked on (what was released as “Dr. Brain’s Thinking Games: IQ Adventure”) was coded in C/C++ after we had done some initial prototyping in Acomplish. The game had a multiplayer component and we ended up borrowing the graphics and networking library from our (at the time) sister company, Blizzard Entertainment. (I later went on to have the worst programming interview experience of my life, so far, there.)When I left KA they were in the process of adopting a new engine for all of their projects that was Java-based, or maybe just evaluating it. In any case, I never ended up working with that engine but I did a small contract project around this time that was a Java applet. (It was for the website for a show on NBC.)My next job was at HomePage.com, which was an idealab startup that was basically a second-generation GeoCities. (A number of the folks in the management team were actually ex-GeoCities people who cashed out when that was acquired by Yahoo.) We built our system in Perl (with mod_perl), and built a sort of primitive HTML templating system called Gear. The original parser was regex-based until one of the other senior engineers wrote a proper lexer and parser for it.I’m not sure when I first started working in JavaScript, but it was probably somewhere in this period.After HomePage.com, I ended up working for MySQL Ab leading the web team, which meant back to writing a bunch of PHP code. And I am sure I had encountered Python before this, but recently I dug up something I wrote during this time in Python that connected to our bugs database, announced new bugs, and could be queried in a few ways. During the rest of my time at MySQL, I did more C/C++ programming, probably more Perl, and even did a tiny bit of work with Ruby.Other programming languages I have played with at some time or another: Logo, MATLAB, OCaml, Tcl, Dylan, Oberon, Modula, and Delphi (Object Pascal).Most recently I have been playing around with Rust and Go, and done some reading on Swift.This whole train of thought was actually triggered by seeing Delphi mentioned in a job description and it reminded me of how intrigued I was when I first encountered it. I have a soft spot for Pascal and the successors. » February 16 (Friday) 6:32pm » code, programming languages, acomplish » Bluesky butterfly logo » Comment Poking around with Rust A long time ago, I implemented a quick-and-dirty daemon in C that used the vendor’s support library to display messages on an LCD pole display at the store. The state of California requires that electronic point-of-sale systems have a customer-facing display, and this fulfilled that.It was very simple, it just listened for TCP connections and displayed the text it was sent. Every 15 seconds it would reset the display to a hardcoded default message. When an item was added to an invoice in Scat POS, it would push the name and price to the daemon. It also pushed the total when payment was initiated.Like I said, it was quick and dirty, and we used it for a decade and I never really got around to doing any of the basic improvements that I wanted to do, like being smarter about when to go back to the default display.The LCD display was one of the things we didn’t manage to sell off when we closed down the store, so I took it home and now it’s on my desk, hooked up to the Raspberry Pi 4 that used to be our print server. I decided to use it as an excuse to start learning Rust.I pulled out one of the examples from the code for a crate that wraps libusb to provide access to USB devices, hit it with a hammer until I got it to push text to the display, and now I have the basis to re-implement what I had before and then give it the polish that I never did. Maybe implement a more user-friendly way of sending the various control codes from the user manual for doing things like clearing the screen.That’s the theory, at least. The reality is that first I had to migrate all of my photos from Flickr to my own service, implement a way to add new photos to the collection, and then upload the photo I took of the display showing a simple message so I could blog about it.And I am not sure if doing more with this is actually the next thing I’ll tackle, but writing about what I had done so far is at least something to check off the to-do list that I don’t have.The code lives in the lcdpoled repository on GitHub. (The old C code is now off on a different branch.) » February 14 (Wednesday) 3:48pm » code, software, lcdpoled, Rust » Bluesky butterfly logo » Comment Now with a different style It has been almost six years since I did much to the design of this place, and I figured it was time to pay a little attention to it. Nothing major, just some tweaks to the colors, finally applying a little more style to the forms, and generally just cleaning things up. I will keep tweaking things. I have an SVG version of the “Barrel of Monkeys” monkey that I want to incorporate into the logo but I want to try and simplify it and get it down to a size where I am okay with putting it inline into the HTML.I am using CSS nesting for the form styles which should be okay with recent browsers. Everything should degrade pretty sensibly, or maybe abruptly. It is great that the state of the art for CSS is advancing fairly quickly again and it is possible to do fun stuff without having to adopt big frameworks or tools that require a build step.I used Adobe’s (free) Color Contrast Analyzer to pick the colors and (try to) make sure they were accessible.Not sure what’s next, but dark mode is on the list somewhere. » February 13 (Tuesday) 11:41am » blogging, fads, talapoin » Bluesky butterfly logo » Comment Same as it ever was As I add (or re-add) features to this blog again, I find myself spelunking in some of the archives and hitting a lot of dead links. I was a little curious to see what the oldest still-alive link was, and it brought me to this very short link post from the year 2000 to this article by Greg Beato about a media startup called Verde.com that made me think of recent stories about The Messenger, a media website that went bust in under a year.I have to hold back from digging into this sort of thing too deeply, or I start to wonder what happened to Scient, or Peek Garlington, and suddenly a day is gone chasing geese.I also came across this old post about the Los Angeles Times partnering with a technology company to launch an RSS reader application and got a little sad that I have never managed to work my way into a job that is journalism-adjacent. Not because I want to take the money and run, but because I think it is a space where I could tremendously effective given enough of a mandate to do so. » February 10 (Saturday) 1:59pm » blogging, fads, journalism, history, The Messenger » » Comment More syndication Now that Bluesky is available without a waitlist and has a web interface, I have been playing around with it a little more. So in that spirit, posts here will get posted there just like I’ve been doing for Mastodon.I’m just using this PHP interface for Bluesky because it was what I ran across first, but I probably should use Ben Ramsey’s socialweb/atproto which looks like a more rigorous implementation of the underlying AT protocol.Anyway, it’s hacked together for now, and the very few followers I have over on Bluesky will now perhaps find these things in their feed.You can even find links to the posts on Mastodon and Bluesky in the details of the entries here. One of my plans is to eventually pull in replies on either of those as comments here based on jwz’s hack for doing that with WordPress. » February 9 (Friday) 2:13pm » code, talapoin, Bluesky » Bluesky butterfly logo » 1 comment, add yours Home About Archive Projects Photos GitHub @jimw@mefi.social Search Dedicated to the public domain by Jim Winstead Jr.