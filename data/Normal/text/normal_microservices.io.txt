What are microservices? Microservice Architecture Supported by Kong Patterns Articles Presentations Adoptnew Refactoringnew Testingnew About What are microservices? Microservices - also known as the microservice architecture - is an architectural style that structures an application as a collection of services that are: Independently deployable Loosely coupled Services are typically organized around business capabilities. Each service is often owned by a single, small team. The microservice architecture enables an organization to deliver large, complex applications rapidly, frequently, reliably and sustainably - a necessity for competing and winning in today’s world. Enabling rapid, frequent and reliable software delivery Success triangle In order to thrive in today’s volatile, uncertain, complex and ambiguous world, businesses must be nimble, agile and innovate faster. Moreover, since modern businesses are powered by software, IT must deliver that software rapidly, frequently and reliably - as measured by the DORA metrics. Rapid, frequent, reliable and sustainable delivery requires the success triangle, a combination of three things: Process - DevOps as defined by the DevOps handbook Organization - a network of small, loosely coupled, cross-functional teams Architecture - a loosely coupled, testable and deployable architecture Teams work independently most of the time to produce a stream of small, frequent changes that are tested by an automated deployment pipeline and deployed into production. Let’s now look at when you typically need to use microservices in order to have a loosely coupled, testable and deployable architecture. When you outgrow your monolithic architecture Let’s imagine that you responsible for a business critical business application that has a monolithic architecture and you are struggling to meet the needs of the business. Should you consider migrating to a microservice architecture? The short answer is that it depends. It’s important to make the most of your monolithic architecture, e.g. adopt DevOps, and reorganize into loosely coupled, small teams. In many cases, once you have embraced the success triangle, your monolithic architecture is sufficiently loosely coupled, testable and deployable to enable rapid software delivery. But sometimes an application can outgrow its monolithic architecture and become an obstacle to rapid, frequent and reliable software delivery. This typically happens when the application becomes large and complex and is developed by many teams. For example, its deployment pipeline become a bottleneck. When this occurs, you should consider migrating to microservices. My presentation Considering Migrating a Monolith to Microservices? A Dark Energy, Dark Matter Perspective describes how to decide whether to migrate to microservices. If you have decided to migrate to microservices then the next step is to design a target architecture. Designing a microservice architecture Assemblage Picking technologies - Kubernetes, message broker etc - is important But what’s critically important is designing a good service architecture: identifying services; defining their responsibilities; their APIs and collaborations. If you get it wrong you risk creating a distributed monolith, which will slow down software delivery. What’s more, designing the service architecture is challenging because it’s a creative activity - not something you can buy, download or read in a manual. Assemblage is an architecture definition process that you can can use to define your microservice architecture. It distills your requirements into system operations and subdomains; uses the dark energy and dark matter forces to group the subdomains into services; and designs the distributed system operations. The Microservices pattern language Assemblage works in conjunction with the Microservice architecture pattern language, which is your guide when designing a technical architecture After defining a target microservice architecture you then need to refactor your existing monolith. Migrating from a monolith to microservices There are numerous principles for migrating a monolithic application to microservices. One key principle is to incrementally migrate to microservices using the Strangler Fig pattern - no big bang rewrite. By using this pattern, you rapidly validate your design decisions and deliver new, useful functionality much earlier. It’s also important to avoid the Microservices adoption antipatterns. To learn more Take a look at the resources for adopting the microservice architecture Topics Note: tagging is work-in-process GitOps · Microservices adoption · ancient lore · anti-patterns · application api · application architecture · architecting · architecture · architecture documentation · assemblage · beer · books · containers · dark energy and dark matter · deployment · deployment pipeline · design-time coupling · developer experience · development · devops · docker · eventuate platform · generative AI · glossary · health · hexagonal architecture · implementing commands · implementing queries · inter-service communication · kubernetes · loose coupling · microservice architecture · microservice chassis · microservices adoption · microservices rules · microservicesio updates · modular monolith · multi-architecture docker images · observability · pattern · refactoring to microservices · resilience · sagas · security · service api · service architecture · service blueprint · service collaboration · service design · service discovery · service granularity · service template · software delivery metrics · success triangle · tacos · team topologies · testing · transaction management · transactional messaging All content The patterns How to apply the patterns Application architecture patterns Monolithic architecture Microservice architecture Decomposition Decompose by business capability Decompose by subdomain Self-contained Servicenew Service per teamnew Refactoring to microservicesnew Strangler Application Anti-corruption layer Data management Database per Service Shared database Saga Command-side replica API Composition CQRS Domain event Event sourcing Transactional messaging Transactional outbox Transaction log tailing Polling publisher Testing Service Component Test Consumer-driven contract test Consumer-side contract test Deployment patterns Multiple service instances per host Service instance per host Service instance per VM Service instance per Container Serverless deployment Service deployment platform Cross cutting concerns Microservice chassis Service Template Externalized configuration Communication style Remote Procedure Invocation Messaging Domain-specific protocol Idempotent Consumer External API API gateway Backend for front-end Service discovery Client-side discovery Server-side discovery Service registry Self registration 3rd party registration Reliability Circuit Breaker Security Access Token Observability Log aggregation Application metrics Audit logging Distributed tracing Exception tracking Health check API Log deployments and changes UI patterns Server-side page fragment composition Client-side UI composition About Microservices.io Microservices.io is brought to you by Chris Richardson. Experienced software architect, author of POJOs in Action, the creator of the original CloudFoundry.com, and the author of Microservices patterns. Chris helps organizations improve agility and competitiveness through better software architecture. Learn more about his consulting engagements, and training workshops. Upcoming public talks/workshops Workshop - ExploreDDD Denver, March PREMIUM CONTENT Premium content and office hours is now available for paid subscribers at premium.microservices.io. MICROSERVICES WORKSHOPS Chris teaches comprehensive workshops for architects and developers that will enable your organization use microservices effectively. Avoid the pitfalls of adopting microservices and learn essential topics, such as service decomposition and design and how to refactor a monolith to microservices. Learn more LEARN about microservices Chris offers numerous other resources for learning the microservice architecture. Get the book: Microservices Patterns Read Chris Richardson's book: Example microservices applications Want to see an example? Check out Chris Richardson's example applications. See code Remote consulting session Got a specific microservice architecture-related question? For example: Wondering whether your organization should adopt microservices? Want to know how to migrate your monolith to microservices? Facing a tricky microservice architecture design problem? Consider signing up for a two hour, highly focussed, consulting session. Virtual bootcamp: Distributed data patterns in a microservice architecture My virtual bootcamp, distributed data patterns in a microservice architecture, is now open for enrollment! It covers the key distributed data management patterns including Saga, API Composition, and CQRS. It consists of video lectures, code labs, and a weekly ask-me-anything video conference repeated in multiple timezones. The regular price is $395/person but use coupon ILFJODYS to sign up for $95 (valid until March 12, 2024). There are deeper discounts for buying multiple seats. Learn more Learn how to create a service template and microservice chassis Take a look at my Manning LiveProject that teaches you how to develop a service template and microservice chassis. Signup for the newsletterFor Email Marketing you can trust. BUILD microservices Ready to start using the microservice architecture? Consulting services Engage Chris to create a microservices adoption roadmap and help you define your microservice architecture, The Eventuate platform Use the Eventuate.io platform to tackle distributed data management challenges in your microservices architecture. Eventuate is Chris's latest startup. It makes it easy to use the Saga pattern to manage transactions and the CQRS pattern to implement queries. ASSESS your architecture Assess your application's microservice architecture and identify what needs to be improved. Consulting services Engage Chris to conduct an architectural assessment. Join the microservices google group Posts What's new? 27 Feb 2024 » New premium post: Microservices rules #2: Fast deployment pipeline 12 Feb 2024 » Deploying microservices: the path from laptop to production 23 Jan 2024 » Microservices rules: what good looks like 16 Jan 2024 » Clarifying architecture with Service Blueprints: system operations + entities 08 Jan 2024 » New premium post: Prevent descent into unmaintainable hell by tracking and improving the DevEx metrics 21 Dec 2023 » New premium post: Thoughts about team size 07 Dec 2023 » Clarifying architecture with Service Blueprints: system operations 03 Dec 2023 » Microservices what does good look like? 03 Dec 2023 » New premium post: Prevent descent into unmaintainable hell by tracking and improving the DORA metrics 13 Nov 2023 » How modular can your monolith go? Part 6 - transaction management for commands 07 Nov 2023 » Service blueprints:creating a shared understanding of your architecture 30 Oct 2023 » How modular can your monolith go? Part 5 - decoupling domains with the Observer pattern 17 Oct 2023 » Assemblage overview: step 3 - defining a service architecture 16 Oct 2023 » New premium article: a service exists to solve problems 09 Oct 2023 » LLMs: our future overlords are hungry and thirsty 21 Sep 2023 » New premium article: thoughts about service granularity 19 Sep 2023 » Assemblage overview: Part 3 - What's a service architecture? 12 Sep 2023 » How modular can your monolith go? Part 4 - physical design principles for faster builds 28 Aug 2023 » How modular can your monolith go? Part 3 - encapsulating a subdomain behind a facade 20 Aug 2023 » How modular can your monolith go? Part 2 - a first look at how subdomains collaborate 14 Aug 2023 » Assemblage overview: Part 2 - Defining subdomains 06 Aug 2023 » Ancient lore: Lehman's laws of software evolution 31 Jul 2023 » How modular can your monolith go? Part 1 - the basics 29 Jul 2023 » Four service collaboration patterns:implementing distributed operations 27 Jul 2023 » Assemblage overview: Part 1 - Defining system operations 25 Jul 2023 » Is organizational unpreparedness a dark matter force? 06 Jul 2023 » The microservice architecture is meant to simplify and accelerate development, but only when done correctly 21 Jun 2023 » The Strangler Fig application pattern: incremental modernization to microservices 22 May 2023 » Beer and tacos and the metaphorical origins of Docker containers 17 May 2023 » Evolving a microservice architecture: how to right-size your services 02 May 2023 » New premium article - Big decisions: should you migrate your monolith to microservices? Part 2. 26 Apr 2023 » DDD, necessary but insufficient: physical design principles for microservices 16 Apr 2023 » Local vs. cloud-based development 13 Apr 2023 » Big decisions: should you migrate to microservices? Part 1 13 Apr 2023 » Announcing Microservices.io Premium 10 Apr 2023 » Exploring transactional messaging in Oracle 23c free developer release 28 Mar 2023 » Essential characteristics of the microservice architecture: loosely coupled 26 Mar 2023 » About dark energy and dark matter: forces that shape an architecture 16 Mar 2023 » Monolith to Microservices with Bite-Sized Kubernetes 13 Mar 2023 » #becauseItDepends Finding your inner Vulcan: unemotional decision making with pattern-style thinking 01 Mar 2023 » The geometry of microservices - cubes, hexagons, triangles, and more 09 Feb 2023 » Introducing Assemblage - a microservice architecture definition process 07 Feb 2023 » Evolving a microservice architecture using dark energy and dark matter forces 03 Feb 2023 » Understanding an architecture: part 2 - user stories and scenarios 18 Jan 2023 » OMG are you still using Rational Rose? 16 Jan 2023 » Understanding an architecture: part 1 - system context 11 Jan 2023 » CxOs neglect architecture at their peril 09 Jan 2023 » Scripting with JBang instead of Python 07 Jan 2023 » Latest updates to microservices.io: new content and tagging 05 Jan 2023 » Updated microservice architecture presentations 29 Nov 2022 » YOW! London 2022: Considering Migrating a Monolith to Microservices? A Dark Energy, Dark Matter Perspective 26 Oct 2022 » QCONSF 2022: Dark Energy, Dark Matter and the Microservices Patterns?! 11 Jul 2022 » In August: designing a microservice architecture public workshop in an APAC-friendly (GMT+9) timezone 04 May 2022 » Essential characteristics of the microservice architecture: independently deployable 02 May 2022 » Dark energy, dark matter and microservice architecture collaboration patterns 01 May 2022 » My new Windows 365 Cloud PC: Windows 11, Docker Desktop and WSL2 23 Apr 2022 » 10 years of 'microservices' 12 Apr 2022 » Interview about microservices with Koushik Kothagal (@Java_Brains) 12 Apr 2022 » Public microservice architecture workshop in APAC-friendly (GMT+9) timezone 06 Apr 2022 » Using scenarios to reinvigorate your microservice architecture 16 Mar 2022 » Icebergs, the Interface Segregation Principle and microservices 15 Mar 2022 » My new Manning LiveProject: developing a service template and microservice chassis 02 Mar 2022 » The Eventuate Tram Customers and Orders example now runs on Arm/M1 MacBook!! 25 Feb 2022 » Publishing a multi-architecture Docker image for the Eventuate CDC service 23 Feb 2022 » Publishing multi-architecture base images for services 21 Feb 2022 » Conversations about Software Engineering podcast: Service Templates and Service Chassis 18 Feb 2022 » The developer's essential knowledge pyramid 14 Feb 2022 » Building a multi-architecture Docker image for Apache Kafka 13 Feb 2022 » Finding that special plus one for your architecture 11 Feb 2022 » Configuring CircleCI to build, test and publish multi-architecture images for Eventuate Common 31 Jan 2022 » Configuring a CircleCI pipeline that builds a multi-architecture Docker image that runs on an Arm-based Apple M1 MacBook 28 Jan 2022 » Developing the Eventuate Common library on an M1/Arm MacBook 26 Jan 2022 » Using patterns and pattern languages to make better architectural decisions 23 Jan 2022 » If the Service template and Microservice chassis are the solution, what is the problem? 20 Jan 2022 » Configuring CircleCI to publish a multi-architecture Docker image 19 Jan 2022 » Writing better problem reports: 6 essential details 19 Jan 2022 » Testing an Intel and Arm multi-architecture Docker image on CircleCI 18 Jan 2022 » Configuring a CircleCI-based pipeline to build multi-architecture Docker images 16 Jan 2022 » Building multi-architecture Docker images for Intel and ARM 10 Jan 2022 » My Apple M1 MacBook: lots of cores, memory and crashing containers 04 Jan 2022 » Writing better problem reports: 6 essential details 30 Nov 2021 » Designing an architecture using dark matter and dark energy 31 Oct 2021 » iSAQB keynote - Modular monoliths and microservices: architectural patterns for rapid, reliable, frequent and sustainable development 15 Sep 2021 » Techlead Journal Podcast - Principles for Adopting Microservices Successfully 10 Aug 2021 » Revised patterns - Microservice Chassis and Service Template 28 Jul 2021 » Events to the rescue: solving distributed data problems in a microservice architecture 27 Jul 2021 » A pattern language for microservices 27 Jul 2021 » The Confident Commit podcast - Episode 6: Architecture meets delivery 02 Jun 2021 » Andorian development principles and practices 21 May 2021 » QConPlus 2021: Takeout burritos and minimizing design-time coupling in a microservice architecture 15 Apr 2021 » Mucon 2021 - Dark energy, dark matter: imperfect metaphors for designing microservices 21 Feb 2021 » Events on the outside, on the inside and at the core 14 Feb 2021 » Why microservices - part 5 - the monolithic architecture and rapid, frequent, reliable and sustainable software delivery 30 Jan 2021 » End of January discounts for my Microservices book and bootcamp 04 Jan 2021 » The Microservices Assessment Platform is generally available 04 Jan 2021 » Designing loosely coupled services 15 Dec 2020 » GraalVM as pattern - work in progress 14 Dec 2020 » Designing loosely coupled services 24 Nov 2020 » Microservices - an architecture that enables DevOps 16 Nov 2020 » Working in a high-performance organization 18 Oct 2020 » Microservices and monoliths are both mistakes 16 Oct 2020 » Handling duplicate messages using the Idempotent consumer pattern 29 Sep 2020 » 497K views and counting: My DockerCon 2016 talk - Microservices + Events + Docker = A Perfect Trio 22 Sep 2020 » TDC 2020 keynote: The microservice architecture - enabling rapid, reliable, frequent and sustainable development 21 Aug 2020 » Decompose your monolith - ten principles for refactoring a monolith to microservices 28 Jul 2020 » Decompose your monolith - Six principles for refactoring a monolith to microservices 30 Jun 2020 » Enrollment is now open for the distributed data patterns for microservices virtual bootcamp 02 Jun 2020 » Enrollment is now open for the beta of distributed data patterns for microservices virtual bootcamp 21 May 2020 » Why microservices - part 4, the last third of the success triangle - architectural requirements for rapid, frequent, reliable and sustainable development 14 May 2020 » A pattern language and visual notation for messaging systems - Enterprise integration patterns by @ghohpe and @bobby_woolf 04 May 2020 » Announcing the first virtual bootcamp - distributed data patterns in a microservice architecture 03 May 2020 » IT in the time of COVID-19 - the tale of three fictitious grocery stores 29 Apr 2020 » Announcing the first virtual bootcamp - distributed data patterns in a microservice architecture 11 Apr 2020 » Why microservices - part 3, two thirds of the success triangle - process and organization 30 Mar 2020 » Why microservices - part 2, the need for sustainable development 19 Mar 2020 » The Japanese edition of Microservices Patterns 12 Mar 2020 » Online microservices workshops and virtual bootcamps 21 Feb 2020 » Slides for my #devnexus talk - Decompose your monolith 18 Feb 2020 » Why microservices - part 1, the need to deliver software rapidly, frequently, and reliably 04 Feb 2020 » Jfokus 2020 - Cubes, Hexagons, Triangles, and More - Understanding Microservices 02 Feb 2020 » Just a reminder - picking the appropriate architecture for your application is a best practice 30 Jan 2020 » New microservices assessment feature - links to patterns 30 Jan 2020 » A glossary of microservice architecture terms 07 Jan 2020 » Books about high-performance software delivery - DevOps Handbook + Team Topologies + Accelerate + Microservices Patterns 12 Dec 2019 » Managing data consistency in a microservice architecture using Sagas - part 4 - implementing an orchestration-based saga 02 Dec 2019 » New saga article - implementing orchestration-based sagas 02 Dec 2019 » Microservices workshop at Jfokus, Stockholm 14 Nov 2019 » New microservices pattern - Self-contained service 12 Nov 2019 » Video for my presentation - Cubes, Hexagons, Triangles, and More - Understanding the Microservice Architecture Through Shapes 10 Nov 2019 » Microservices Patterns - Now available in Russian and on Audible 09 Oct 2019 » Decompose Your Monolith - Strategies for Migrating to Microservices 02 Oct 2019 » GOTO Chicago presentation - Not Just Events - Developing Asynchronous Microservices 20 Sep 2019 » Slides for my YOW! Perth and Singapore - Cubes, Hexagons, Triangles, and More - Understanding the Microservice Architecture Through Shapes 20 Sep 2019 » Slides for my Oracle CodeOne 2019 talk - Descending the Testing Pyramid - Effective Testing Strategies for Microservices 20 Sep 2019 » Slides for my Oracle CodeOne 2019 talk - Decompose Your Monolith - Strategies for Migrating to Microservices 15 Aug 2019 » Managing data consistency in a microservice architecture using Sagas - part 3 - implementing a choreography-based saga 04 Aug 2019 » Managing data consistency in a microservice architecture using Sagas - part 2 - coordinating sagas 23 Jul 2019 » Do your architects actually work on architecture? 16 Jul 2019 » A great trilogy by Mark Schwartz (@schwartz_cio) - War and Peace and IT, A Seat at the Table, and The Art of Business Value 15 Jul 2019 » The FTGO application and the Database per service pattern 09 Jul 2019 » The YOW conferences in Perth, Hong Kong, and Singapore 09 Jul 2019 » Slides and video for my MicroCPH talk on managing data consistency in a microservice architecture using Sagas 09 Jul 2019 » Managing data consistency in a microservice architecture using Sagas - part 1 29 Jun 2019 » The Microservices assessment platform now supports organizations 22 Jun 2019 » Containers, the developer workflow and the test pyramid 18 Jun 2019 » Microservices adoption antipatterns - the series 07 Jun 2019 » Microservices adoption anti-pattern - Red flag law 27 May 2019 » The Chinese translation of Microservices Patterns 21 May 2019 » Microservices adoption anti-pattern - More the merrier 12 May 2019 » Self-documenting services - generating a microservice canvas 30 Apr 2019 » Microservices adoption anti-pattern - Focussing on technology 28 Apr 2019 » New #GotoChgo, #microcph conference talks on asynchronous microservices - implementing Sagas and CQRS 28 Apr 2019 » Two more anti-patterns of microservices adoption 16 Apr 2019 » Books you should read - Why we sleep 09 Apr 2019 » Microservices adoption anti-pattern - Trying to fly before you can walk 24 Mar 2019 » Public microservices training in the Netherlands, May 15th and 16th 27 Feb 2019 » Documenting a service using the microservice canvas 25 Feb 2019 » Microservices adoption anti-pattern - scattershot adoption 16 Feb 2019 » What's a (micro)service - part 1? 16 Feb 2019 » Microservices workshops in Chicago and Stockholm 29 Jan 2019 » Public microservices training in Stockholm, May 8th and 9th 29 Jan 2019 » More on microservices anti-patterns 28 Jan 2019 » Microservices anti-patterns in Melbourne 14 Jan 2019 » Anti-pattern - microservices as the goal 12 Jan 2019 » My YOW! 2018 presentation - Events and Commands, Developing Asynchronous Microservices 10 Jan 2019 » Workshops at O'Reilly Software Architecture New York and GOTO Chicago 07 Jan 2019 » Microservices adoption anti-patterns - microservices are a magic pixie dust 31 Dec 2018 » The Microservice Architecture Assessment is now available 08 Nov 2018 » Mucon - Not Just Events, Developing Asynchronous Microservices 07 Nov 2018 » Microservices at the @thekonginc Summit in September 04 Nov 2018 » Potholes in the road from monolithic hell - Microservices adoption anti-patterns 18 Oct 2018 » Oracle Code One - Events and commands, developing asynchronous microservices 18 Oct 2018 » New and revised microservices classes 15 Oct 2018 » Microservices at Silicon Valley Code Camp 22 Mar 2018 » microXchg 2018 - Managing data consistency in a microservice architecture using Sagas 20 Feb 2018 » CodeFreeze 2018 - There is no such thing as a microservice! 04 Dec 2017 » QCONSF 2017 presentation - ACID Is So Yesterday, Maintaining Data Consistency with Sagas 04 Dec 2017 » Upcoming public training - Microservices at UMN, Minneapolis in January 01 Aug 2017 » Presentation - Solving distributed data management problems in a microservice architecture 24 Jul 2017 » Revised data patterns 26 Mar 2017 » There is no such thing as a microservice! 24 Feb 2017 » New book - Microservice patterns 12 Feb 2017 » How to apply the pattern language 06 Jun 2016 » Fantastic presentation by Eric Evans on DDD and microservices 23 Feb 2016 » One day microservices class in Oakland, CA 21 Feb 2016 » Microservice chassis pattern 28 Jul 2015 » What's new with #microservices - July 28, 2015: integration platforms, new article on microservices and IPC 23 Jun 2015 » What's new with #microservices - June 23, 2015: @crichardson and microservices training 06 Jun 2015 » What's new with #microservices - June 6, 2015: @martinfowler, @crichardson, @adrianco 15 Mar 2015 » Microservice deployment patterns 01 Mar 2015 » Service discovery patterns 15 Jan 2015 » Event Sourcing + CQRS example microservices 02 Nov 2014 » Webinars on Spring Boot, Cloud Foundry, and Microservices 08 Sep 2014 » API gateway pattern added 12 May 2014 » What's new with #microservices - May 12th 2014 07 Apr 2014 » This week in #microservices - April 7th 2014 31 Mar 2014 » This week in #microservices - March 31st 2014 18 Mar 2014 » Welcome to Microservices! Tweets by @MicroSvcArch Tweet Follow @MicroSvcArch Copyright © 2024 Chris Richardson • All rights reserved • Supported by Kong.