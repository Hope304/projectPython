One-stop Generative AI Stack to Build Production-ready Apps | DataStaxProductsPricingStoriesResourcesDocsContact UsSign InSign InTry For FreeTHE DATASTAX DIFFERENCEMake Wild Things,PossibleTake your ideas from concept to production with data that yields 20% higher relevance, and up to 74x faster response time with a one-stop Generative AI RAG + Vector stack.GET STARTED FOR FREE REQUEST A DEMOGenerative AI Leaders Shaping Their IndustriesOne-stop GenAI StackA RAG API with all the data, tools, and an opinionated stack that just works. Both vector and structured data, secure, compliant, scalable, and supported. Integrated with LangChain, Vercel, GitHub Copilot and AI ecosystem leaders.Request a Custom DemoPlayRelevant GenAI FTWMinimize hallucinations with up to 20% higher relevance, 74x faster response time, and 9x higher throughput than Pinecone all at 80% lower TCO. Read while indexing to make data updates available with zero delay.Learn More"Astra DB isn't just a tool; it's an empowering force for developers to fully leverage GenAI's potential."Santosh MaddilaPrincipal Data Scientist at Aviso AIFast Path to ProductionQuickly take your GenAI idea into production. Deploy on the leader in production AI workloads and support global-scale on any cloud with enterprise level security and compliance.Shape the WildGenAI should be fun! An awesome developer experience for any JavaScript, Python, Java, and C++ dev to build production GenAI apps with LangChain, GitHub, Vercel, and the leading AI ecosystem partners.Try It For FreeDevelopersRAG Made EasierAn intuitive API and powerful integrations for production-level RAG and FLARE.InstallInstall the Astra librarypythonjavascriptjavapip install astrapy npm install @datastax/astra-db-tsMaven: <dependency> <groupId>com.datastax.astra</groupId> <artifactId>astra-db-client</artifactId> <version>1.2.4</version> </dependency> Gradle: dependencies { implementation 'com.datastax.astra:astra-db-client:1.2.4' }CreateCreate or connect to existing collectionpythonjavascriptjava# The return of create_collection() will return the collection collection = astra_db.create_collection( collection_name="collection_test", dimension=5 ) # Or you can connect to an existing connection directly collection = AstraDBCollection( collection_name="collection_test", astra_db=astra_db ) # You don't even need the astra_db object collection = AstraDBCollection( collection_name="collection_test", token=token, api_endpoint=api_endpoint ) // Create a vector collection const collection = await db.createCollection("collection_test", { vector: { dimension: 5, metric: "cosine", }, }); // Or you can connect to an existing collection const collection = await db.collection('collection_test'); AstraDB db = new AstraDB("token", "endpoint"); AstraDBCollection collection = db.createCollection("vector_test", 5);InsertInserting a vector object into your vector store (collection)pythonjavascriptjavacollection.insert_one( { "_id": "5", "name": "Coded Cleats Copy", "description": "ChatGPT integrated sneakers that talk to you", "$vector": [0.25, 0.25, 0.25, 0.25, 0.25], } ) const doc = await collection.insertOne({ "_id": "5", "$vector": [0.25, 0.25, 0.25, 0.25, 0.25], "name": "Coded Cleats Copy", "description": "ChatGPT integrated sneakers that talk to you", });collection.insertOne(new JsonDocument() .put("text", "ChatGPT integrated sneakers that talk to you") .vector(new float[]{0.1f, 0.15f, 0.3f, 0.12f, 0.05f}));FindFind documents using vector searchpythonjavascriptjavadocuments = collection.vector_find( [0.15, 0.1, 0.1, 0.35, 0.55], limit=100, ) const results = await collection.find(null, { sort: { $vector: [0.15, 0.1, 0.1, 0.35, 0.55], }, limit: 100, }) .toArray(); float[] embeddings = new float[] {0.1f, 0.15f, 0.3f, 0.12f, 0.05f}; Filter metadataFilter = new Filter().where("text", EQUALS_TO, "ChatGPT"); Stream<JsonDocumentResult> rag = collection.findVector(embeddings, metadataFilter, 10);Try For Free$300/year in free credit and no credit card required.Explore examplesTutorials and sample Generative AI apps with best practices.DOCS Get started in minutes with Generative AI and RAG.What’s NewWHITEPAPER An LLM Agent Reference Architecture: Demystifying LLM-based SystemsDemystify LLM-based apps with:Common design patterns and use cases in Generative AI applicationsIn-depth architectural examples (for example, building a chatbot with docs)Important architecture considerations for GenAI appsLearn MoreBlogBuilding a Wikipedia Chatbot Using Astra DB, LangChain, and VercelLearn More SUCCESS STORYHow Priceline Helps Travelers Book Great Travel Deals with Real-time AILearn MoreReady to get started with Vector Search? Deliver Generative AI apps on the world’s most powerful, most scalable vector database.GET STARTED FOR FREEREQUEST A DEMOCompanyAbout UsLeadershipBoard of DirectorsContact UsPartnersCareersNewsroomResourcesBlogEventseBooksWhitepapersWebinarsLegalSecurityAwesome AstraCloud PartnersAmazon Web ServicesGoogle Cloud PlatformMicrosoft Azure© 2024 DataStaxPrivacy PolicyTerms of UseTrademark NoticeBrand ResourcesDo Not Sell My InfoDataStax, is a registered trademark of DataStax, Inc.. Apache, Apache Cassandra, Cassandra, Apache Pulsar, and Pulsar are either registered trademarks or trademarks of the Apache Software Foundation.United States