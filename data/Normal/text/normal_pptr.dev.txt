Puppeteer | Puppeteer Skip to main contentPuppeteerDocsPuppeteer API@puppeteer/browsers API22.4.0Next22.4.0Archived versions22.3.022.2.022.1.022.0.021.11.021.10.021.9.021.8.021.7.021.6.121.6.021.5.221.5.121.5.021.4.121.4.021.3.821.3.721.3.621.3.521.3.421.3.321.3.221.3.121.3.021.2.121.2.021.1.121.1.021.0.321.0.221.0.121.0.020.9.020.8.320.8.220.8.120.8.020.7.420.7.320.7.220.7.120.7.020.6.020.5.020.4.020.3.020.2.120.2.020.1.220.1.120.1.020.0.019.11.119.11.019.10.119.10.019.9.119.9.019.8.519.8.419.8.319.8.219.8.119.8.019.7.519.7.419.7.319.7.219.7.119.7.019.6.319.6.219.6.119.6.019.5.219.5.119.5.019.4.119.4.019.3.019.2.219.2.119.2.019.1.219.1.119.1.019.0.018.2.118.2.018.1.018.0.518.0.418.0.318.0.218.0.118.0.017.1.317.1.217.1.117.1.017.0.016.2.016.1.116.1.016.0.015.5.015.4.215.4.115.4.015.3.215.3.115.3.0SearchPuppeteerGuidesConfigurationQuery SelectorsLocatorsEvaluate JavaScriptDockerRequest InterceptionChrome ExtensionsDebuggingIntegrationsAngular SchematicsExperimental WebDriver BiDi supportChromium SupportTroubleshootingContributingFAQPuppeteerVersion: 22.4.0On this pagePuppeteer Guides | API | FAQ | Contributing | Troubleshooting​ Puppeteer is a Node.js library which provides a high-level API to control Chrome/Chromium over the DevTools Protocol. Puppeteer runs in headless mode by default, but can be configured to run in full ("headful") Chrome/Chromium. What can I do?​ Most things that you can do manually in the browser can be done using Puppeteer! Here are a few examples to get you started: Generate screenshots and PDFs of pages. Crawl a SPA (Single-Page Application) and generate pre-rendered content (i.e. "SSR" (Server-Side Rendering)). Automate form submission, UI testing, keyboard input, etc. Create an automated testing environment using the latest JavaScript and browser features. Capture a timeline trace of your site to help diagnose performance issues. Test Chrome Extensions. Getting Started​ Installation​ To use Puppeteer in your project, run: npm i puppeteer# or using yarnyarn add puppeteer# or using pnpmpnpm i puppeteer When you install Puppeteer, it automatically downloads a recent version of Chrome for Testing (~170MB macOS, ~282MB Linux, ~280MB Windows) and a chrome-headless-shell binary (starting with Puppeteer v21.6.0) that is guaranteed to work with Puppeteer. The browser is downloaded to the $HOME/.cache/puppeteer folder by default (starting with Puppeteer v19.0.0). See configuration for configuration options and environmental variables to control the download behavor. If you deploy a project using Puppeteer to a hosting provider, such as Render or Heroku, you might need to reconfigure the location of the cache to be within your project folder (see an example below) because not all hosting providers include $HOME/.cache into the project's deployment. For a version of Puppeteer without the browser installation, see puppeteer-core. If used with TypeScript, the minimum supported TypeScript version is 4.7.4. Configuration​ Puppeteer uses several defaults that can be customized through configuration files. For example, to change the default cache directory Puppeteer uses to install browsers, you can add a .puppeteerrc.cjs (or puppeteer.config.cjs) at the root of your application with the contents const {join} = require('path');/** * @type {import("puppeteer").Configuration} */module.exports = { // Changes the cache location for Puppeteer. cacheDirectory: join(__dirname, '.cache', 'puppeteer'),}; After adding the configuration file, you will need to remove and reinstall puppeteer for it to take effect. See the configuration guide for more information. puppeteer-core​ For every release since v1.7.0 we publish two packages: puppeteer puppeteer-core puppeteer is a product for browser automation. When installed, it downloads a version of Chrome, which it then drives using puppeteer-core. Being an end-user product, puppeteer automates several workflows using reasonable defaults that can be customized. puppeteer-core is a library to help drive anything that supports DevTools protocol. Being a library, puppeteer-core is fully driven through its programmatic interface implying no defaults are assumed and puppeteer-core will not download Chrome when installed. You should use puppeteer-core if you are connecting to a remote browser or managing browsers yourself. If you are managing browsers yourself, you will need to call puppeteer.launch with an explicit executablePath (or channel if it's installed in a standard location). When using puppeteer-core, remember to change the import: import puppeteer from 'puppeteer-core'; Usage​ Puppeteer follows the latest maintenance LTS version of Node. Puppeteer will be familiar to people using other browser testing frameworks. You launch/connect a browser, create some pages, and then manipulate them with Puppeteer's API. For more in-depth usage, check our guides and examples. Example​ The following example searches developer.chrome.com for blog posts with text "automate beyond recorder", click on the first result and print the full title of the blog post. import puppeteer from 'puppeteer';(async () => { // Launch the browser and open a new blank page const browser = await puppeteer.launch(); const page = await browser.newPage(); // Navigate the page to a URL await page.goto('https://developer.chrome.com/'); // Set screen size await page.setViewport({width: 1080, height: 1024}); // Type into search box await page.type('.devsite-search-field', 'automate beyond recorder'); // Wait and click on first result const searchResultSelector = '.devsite-result-item-link'; await page.waitForSelector(searchResultSelector); await page.click(searchResultSelector); // Locate the full title with a unique string const textSelector = await page.waitForSelector( 'text/Customize and automate' ); const fullTitle = await textSelector?.evaluate(el => el.textContent); // Print the full title console.log('The title of this blog post is "%s".', fullTitle); await browser.close();})(); Default runtime settings​ 1. Uses Headless mode By default Puppeteer launches Chrome in the Headless mode. const browser = await puppeteer.launch();// Equivalent toconst browser = await puppeteer.launch({headless: true}); Before v22, Puppeteer launched the old Headless mode by default. The old headless mode is now known as chrome-headless-shell and ships as a separate binary. chrome-headless-shell does not match the behavior of the regular Chrome completely but it is currently more performant for automation tasks where the complete Chrome feature set is not needed. If the performance is more important for your use case, switch to chrome-headless-shell as following: const browser = await puppeteer.launch({headless: 'shell'}); To launch a "headful" version of Chrome, set the headless to false option when launching a browser: const browser = await puppeteer.launch({headless: false}); 2. Runs a bundled version of Chrome By default, Puppeteer downloads and uses a specific version of Chrome so its API is guaranteed to work out of the box. To use Puppeteer with a different version of Chrome or Chromium, pass in the executable's path when creating a Browser instance: const browser = await puppeteer.launch({executablePath: '/path/to/Chrome'}); You can also use Puppeteer with Firefox. See status of cross-browser support for more information. See this article for a description of the differences between Chromium and Chrome. This article describes some differences for Linux users. 3. Creates a fresh user profile Puppeteer creates its own browser user profile which it cleans up on every run. Using Docker​ See our Docker guide. Using Chrome Extensions​ See our Chrome extensions guide. Resources​ API Documentation Guides Examples Community list of Puppeteer resources Contributing​ Check out our contributing guide to get an overview of Puppeteer development. FAQ​ Our FAQ has migrated to our site.NextGuidesGetting StartedInstallationUsageDefault runtime settingsResourcesContributingFAQCommunityStack OverflowTwitterYouTubeCopyright © 2024 Google, Inc.