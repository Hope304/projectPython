Dart programming language | DartGoogle uses cookies to deliver its services, to personalize ads, and to analyze traffic. You can adjust your privacy controls anytime in your Google settings. Learn more.OkaymenuOverviewDocsCommunityTry DartGet Dart Dart 3.3 is here! Try new extension types, next-generation JavaScript interop, and more.Read the blog postOverviewCommunityTry DartGet DartDocsTutorials & codelabsTutorialsCodelabsList of Dart codelabsLanguage cheatsheetIterable collectionsAsynchronous programmingLanguageIntroductionSyntax basicsVariablesOperatorsCommentsMetadataLibraries & importsKeywordsTypesBuilt-in typesRecordsCollectionsGenericsTypedefsType systemPatternsOverview & usagePattern typesFunctionsControl flowLoopsBranchesError handlingClasses & objectsClassesConstructorsMethodsExtend a classMixinsEnumsExtension methodsExtension typesCallable objectsClass modifiersOverview & usageClass modifiers for API maintainersReferenceConcurrencyOverviewAsynchronous supportIsolatesNull safetySound null safetyMigrating to null safetyUnderstanding null safetyUnsound null safetyFAQCore librariesOverviewdart:coredart:asyncdart:mathdart:convertdart:iodart:htmlUsing streamsCreating streamsFutures and error handlingEffective DartOverviewStyleDocumentationUsageDesignPackagesHow to use packagesCommonly used packagesCreating packagesPublishing packagesWriting package pagesPackage referenceDependenciesGlossaryPackage layout conventionsPub environment variablesPubspec fileTroubleshooting pubVerified publishersSecurity advisoriesVersioningDevelopmentFutures, async, awaitJSONNumber representationGoogle APIsMulti-platform appsCommand-line & server appsOverviewGet startedWrite command-line appsFetch data from the internetWrite HTTP serversLibraries & packagesGoogle CloudWeb appsOverviewGet startedDeploymentLibraries & packagesEnvironment declarationsInteroperabilityC interopObjective-C & Swift interopJava & Kotlin interopJavaScript interopOverviewUsageJS typesTutorialsPast JS interopWeb interopTools & techniquesOverviewEditors & debuggersIntelliJ & Android StudioVS CodeDart DevToolsDartPadOverviewTroubleshooting DartPadCommand-line toolsDart SDKOverviewdartdart analyzedart compiledart createdart docdart fixdart formatdart infodart pubdart rundart testdartaotruntimeExperiment flagsOther command-line toolsbuild_runnerwebdevStatic analysisCustomizing static analysisFixing common type problemsFixing type promotion failuresLinter rulesTesting & optimizationTestingDebugging web appsWhat not to commitResourcesBreaking changesLanguage evolutionLanguage specificationDart 3 migration guideComing from ...JavaScript to DartSwift to DartFAQGlossaryBooksVideosRelated sitesAPI referenceBlogDartPad (online editor)FlutterPackage siteAn approachable, portable, and productive language for high-quality apps on any platformplay_circle Watch videoDart is free and open source ApproachableDevelop with a consistent, concise, and strongly typed programming language that offers modern features like null safety and pattern matching.ProductivedevelopmentMake changes iteratively: use hot reload to see the result instantly in your running app.Portable and faston all platformsCompile to ARM, x64, and RISC-V machine code for mobile, desktop, and backend. Or, compile to JavaScript & WebAssembly for the web.ApproachableMature and complete async-await for user interfaces containing event-driven code, paired with isolate-based concurrencyWrite safe and concise code using features like sound null safety, collection if, and pattern matching.A consistent programming language, with an easy to learn and familiar syntax.Productive DevelopmentMake changes to your source code iteratively, using hot reload to instantly see the effect in the running app.Write code using a flexible type system with rich static analysis and powerful, configurable tooling.Do profiling, logging, and debugging with your code editor of choice.Fast on all platformsAOT-compile apps to native machine code for instant startup.Target the web with complete, mature, fast compilers for JavaScript & WebAssembly.Run backend code supporting your app, written using a single programming language.ApproachableMature and complete async-await for user interfaces containing event-driven code, paired with isolate-based concurrency.Write safe and concise code using features like sound null safety, collection if, and pattern matching.A consistent programming language, with an easy to learn and familiar syntax.Productive developmentMake changes to your source code iteratively, using hot reload to instantly see the effect in the running app.Write code using a flexible type system with rich static analysis and powerful, configurable tooling.Do profiling, logging, and debugging with your code editor of choice.Fast on all platformsAOT-compile apps to native machine code for instant startup.Target the web with complete, mature, fast compilers for JavaScript and WebAssembly.Run backend code supporting your app, written using a single programming language.Try Dart in your browserWant more practice? Learn the language, explore the core libraries, or build a command-line app. Except as otherwise noted, this site is licensed under a Creative Commons Attribution 4.0 International License, and code samples are licensed under the 3-Clause BSD License.TermsPrivacySecurity