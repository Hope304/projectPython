TypeScript: JavaScript With Syntax For Types.Skip to main contentTypeScriptDownloadDocsHandbookCommunityPlaygroundToolsin EnTypeScript is JavaScript with syntax for types.TypeScript is a strongly typed programming language that builds on JavaScript, giving you better tooling at any scale.Try TypeScript NowOnline or via npmEditor ChecksAuto-completeInterfacesJSX tsconst user = { firstName: "Angela", lastName: "Davis", role: "Professor",} console.log(user.name)Property 'name' does not exist on type '{ firstName: string; lastName: string; role: string; }'.2339Property 'name' does not exist on type '{ firstName: string; lastName: string; role: string; }'. tsconst user = { firstName: "Angela", lastName: "Davis", role: "Professor",} console.log(user.name)Property 'name' does not exist on type '{ firstName: string; lastName: string; role: string; }'.2339Property 'name' does not exist on type '{ firstName: string; lastName: string; role: string; }'. TypeScript 5.3 is now available, 5.4 has a release candidate to try.What is TypeScript?JavaScript and MoreTypeScript adds additional syntax to JavaScript to support a tighter integration with your editor. Catch errors early in your editor.A Result You Can TrustTypeScript code converts to JavaScript, which runs anywhere JavaScript runs: In a browser, on Node.js or Deno and in your apps.Safety at ScaleTypeScript understands JavaScript and uses type inference to give you great tooling without additional code.Get StartedHandbookLearn the languagePlaygroundTry in your browserDownloadInstall TypeScriptAdopt TypeScript GraduallyApply types to your JavaScript project incrementally, each step improves editor support and improves your codebase.Let's take this incorrect JavaScript code, and see how TypeScript can catch mistakes in your editor. jsfunction compact(arr) { if (orr.length > 10) return arr.trim(0, 10) return arr} No editor warnings in JavaScript filesThis code crashes at runtime! JavaScript file js// @ts-check function compact(arr) { if (orr.length > 10)Cannot find name 'orr'.2304Cannot find name 'orr'. return arr.trim(0, 10) return arr} Adding this to a JS file shows errors in your editor the param is arr, not orr! JavaScript with TS Check js// @ts-check /** @param {any[]} arr */function compact(arr) { if (arr.length > 10) return arr.trim(0, 10)Property 'trim' does not exist on type 'any[]'.2339Property 'trim' does not exist on type 'any[]'. return arr } Using JSDoc to give type information Now TS has found a bad call. Arrays have slice, not trim. JavaScript with JSDoc tsfunction compact(arr: string[]) { if (arr.length > 10) return arr.slice(0, 10) return arr} TypeScript adds natural syntax for providing types TypeScript fileDescribe Your DataDescribe the shape of objects and functions in your code.Making it possible to see documentation and issues in your editor. tsinterface Account { id: number displayName: string version: 1} function welcome(user: Account) { console.log(user.id)} tstype Result = "pass" | "fail" function verify(result: Result) { if (result === "pass") { console.log("Passed") } else { console.log("Failed") }} TypeScript becomes JavaScript via the delete key. tstype Result = "pass" | "fail" function verify(result: Result) { if (result === "pass") { console.log("Passed") } else { console.log("Failed") }} TypeScript file. tstype Result = "pass" | "fail" function verify(result: Result) { if (result === "pass") { console.log("Passed") } else { console.log("Failed") }} Types are removed. js function verify(result) { if (result === "pass") { console.log("Passed") } else { console.log("Failed") }} JavaScript file.TypeScript TestimonialsFirst, we were surprised by the number of small bugs we found when converting our code.Second, we underestimated how powerful the editor integration is.TypeScript was such a boon to our stability and sanity that we started using it for all new code within days of starting the conversion.Felix Rieseberg at Slack covered the transition of their desktop app from JavaScript to TypeScript in their blogReadOpen Source with TypeScriptAngularVueJestReduxIonicProbotDenoVercelYarnGitHubDesktopLoved by Developers Voted 2nd most loved programming language in the Stack Overflow 2020 Developer surveyTypeScript was used by 78% of the 2020 State of JS respondents, with 93% saying they would use it again.TypeScript was given the award for “Most Adopted Technology” based on year-on-year growth.Get StartedHandbookLearn the languagePlaygroundTry in your browserDownloadInstall TypeScriptMade with ♥ in Redmond, Boston, SF & Dublin© 2012-2024 MicrosoftPrivacyUsing TypeScriptGet StartedDownloadCommunityPlaygroundTSConfig RefWhy TypeScriptDesignCode SamplesJavaScriptTypeScriptSee how TypeScript improves day to day working with JavaScript with minimal additional syntax.JavaScript EssentialsHello WorldObjects and ArraysFunctionsCode FlowFunctions with JavaScriptGeneric FunctionsTyping FunctionsFunction ChainingWorking With ClassesClasses 101ThisGeneric ClassesMixinsModern JavaScriptAsync AwaitImmutabilityImport ExportJSDoc SupportExternal APIsTypeScript with WebTypeScript with ReactTypeScript with DenoTypeScript with NodeTypeScript with WebGLHelping with JavaScriptQuick FixesErrorsExplore how TypeScript extends JavaScript to add more safety and tooling.PrimitivesAnyLiteralsUnion and Intersection TypesUnknown and NeverType PrimitivesTuplesBuilt-in Utility TypesNullable TypesMeta-TypesConditional TypesDiscriminate TypesIndexed TypesMapped TypesLanguageSoundnessStructural TypingType GuardsType Widening and NarrowingLanguage ExtensionsEnumsNominal TypingTypes vs InterfacesCommunityGet HelpBlogGitHub RepoCommunity Chat@TypeScriptMastodonStack OverflowWeb RepoMSG